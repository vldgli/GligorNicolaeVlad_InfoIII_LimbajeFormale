ex1:

#include <iostream>
#include <string>


char proceseaza(const std::string& secventa) {
    char stareCurenta = 'A'; 

    for (char simbol : secventa) {
        switch (stareCurenta) {
        case 'A':
            if (simbol == '0') {
                stareCurenta = 'B';
            }
            break;
        case 'B':
            if (simbol == '0') {
                stareCurenta = 'A';
            }
            break;
        }
    }

    return stareCurenta;
}

int main() {
    std::string secvente[] = { "010", "110", "1001" };

    for (const std::string& secventa : secvente) {
        std::cout << "Starea finala pentru secventa " << secventa
            << " este: " << proceseaza(secventa) << std::endl;
    }

    return 0;
}


ex2:

#include <iostream>
#include <vector>

class ParcareAutomata {
private:
    std::vector<bool> locuriParcare; 

public:
    
    ParcareAutomata(int N) : locuriParcare(N, false) {}

   
    bool parcheaza(int loc) {
        if (loc < 0 || loc >= locuriParcare.size() || locuriParcare[loc]) {
            return false; 
        }
        locuriParcare[loc] = true;
        return true;
    }

    
    bool pleaca(int loc) {
        if (loc < 0 || loc >= locuriParcare.size() || !locuriParcare[loc]) {
            return false; 
        }
        locuriParcare[loc] = false;
        return true;
    }

    
    void afiseazaStare() {
        for (int i = 0; i < locuriParcare.size(); i++) {
            std::cout << "Loc " << i + 1 << ": " << (locuriParcare[i] ? "Ocupat" : "Liber") << std::endl;
        }
    }
};

int main() {
    ParcareAutomata parcare(5);


    parcare.parcheaza(0);
    parcare.parcheaza(2);
    parcare.pleaca(0);
    parcare.afiseazaStare();

    return 0;
}

ex3:

#include <iostream>
#include <string>
#include <set>

class NFA {
private:
    std::set<char> states;
    char initialState;
    std::set<char> acceptStates;
    std::set<char> currentStates;

    bool transition(char input) {
        std::set<char> nextStates;
        for (char state : currentStates) {
            switch (state) {
            case '0': 
                if (input == 'a') nextStates.insert('2'); 
                if (input == 'b') nextStates.insert('3'); 
                break;
            case '2': 
                if (input == 'a') nextStates.insert('2'); 
                if (input == 'b') nextStates.insert('1'); 
                break;
            case '3': 
                if (input == 'b') nextStates.insert('3'); 
                if (input == 'a') nextStates.insert('1'); 
                break;
            }
        }
        currentStates = nextStates;
        return !currentStates.empty();
    }

public:
    NFA() {
        states = { '0', '1', '2', '3' }; 
        initialState = '0';
        acceptStates = { '1' }; 
        reset();
    }

    void reset() {
        currentStates.clear();
        currentStates.insert(initialState);
    }

    bool processString(const std::string& input) {
        reset();
        for (char c : input) {
            if (!transition(c)) {
                return false;
            }
        }
        for (char state : currentStates) {
            if (acceptStates.find(state) != acceptStates.end()) {
                return true;
            }
        }
        return false;
    }
};

int main() {
    NFA nfa;
    std::string input;

    std::cout << "Enter a string: ";
    std::cin >> input;

    if (nfa.processString(input)) {
        std::cout << "String accepted by the NFA." << std::endl;
    }
    else {
        std::cout << "String rejected by the NFA." << std::endl;
    }

    return 0;
}
